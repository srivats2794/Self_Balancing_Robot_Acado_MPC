%% file : acado_solver_sfun.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for acado_solver_sfun
%% 
%% Simulink version      : 10.7 (R2023a) 19-Nov-2022
%% TLC file generated on : 27-Dec-2023 17:49:05

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'acado_solver_sfun';
     def.OutputFcnSpec = 'acado_step(ACADOinput u1[1], ACADOoutput y1[1])';
     def.StartFcnSpec = 'acado_initialize( void )';
     def.TerminateFcnSpec = 'acado_cleanup( void )';
     def.HeaderFiles = {'acado_common.h', 'acado_solver_sfunction.h'};
     def.SourceFiles = {'acado_solver.c', 'acado_integrator.c', 'acado_auxiliary_functions.c', 'acado_solver_sfunction.c', 'acado_qpoases3_interface.c', 'qpoases3\src\Bounds.c', 'qpoases3\src\Constraints.c', 'qpoases3\src\Indexlist.c', 'qpoases3\src\Matrices.c', 'qpoases3\src\MessageHandling.c', 'qpoases3\src\Options.c', 'qpoases3\src\Flipper.c', 'qpoases3\src\QProblem.c', 'qpoases3\src\QProblemB.c', 'qpoases3\src\Utils.c'};
     def.IncPaths = {'qpoases3', 'qpoases3/include', 'qpoases3/src'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements acado_solver_sfun "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void
    %assign charType = LibGetDataTypeNameFromId(::CompiledModel.tSS_CHAR)
    %assign integerType = LibGetDataTypeNameFromId(::CompiledModel.tSS_INTEGER)

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("acado_solver_sfun_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<SLibEmitIncludesForBasicTypesAll()>
        #endif
        
        extern %<integerType> acado_solver_sfun_wrapper_allocmem(void** y1BUS, %<integerType> y1BUSWidth, void** u1BUS, %<integerType> u1BUSWidth);
        extern %<integerType> acado_solver_sfun_wrapper_freemem(void** y1BUS, void** u1BUS);
        
        extern %<integerType> acado_solver_sfun_wrapper_allocmem_dynamic_array(void);
        extern %<integerType> acado_solver_sfun_wrapper_freemem_dynamic_array(void);

        extern void acado_solver_sfun_wrapper_Start(void);
        extern void acado_solver_sfun_wrapper_Output(const void* u1, void* u1BUS,  void* y1, void* y1BUS);
        extern void acado_solver_sfun_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("acado_solver_sfun_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<SLibEmitIncludesForBasicTypesAll()>
        #endif

        #include "acado_common.h"
        #include "acado_solver_sfunction.h"

        %<integerType> acado_solver_sfun_wrapper_allocmem(void** y1BUS, %<integerType> y1BUSWidth, void** u1BUS, %<integerType> u1BUSWidth) {
            *y1BUS = calloc(sizeof(ACADOoutput), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(ACADOinput), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            return 0;
        }
        
        %<integerType> acado_solver_sfun_wrapper_freemem(void** y1BUS, void** u1BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            return 0;
        }
        
        %<integerType> acado_solver_sfun_wrapper_allocmem_dynamic_array(void) {
            return 0;
        }
        
        %<integerType> acado_solver_sfun_wrapper_freemem_dynamic_array(void) {
            return 0;
        }

        void acado_solver_sfun_wrapper_Start(void) {
            acado_initialize();
        }

        void acado_solver_sfun_wrapper_Output(const void* u1, void* u1BUS,  void* y1, void* y1BUS) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(ACADOinput *)u1BUS)", "(%<charType> *)u1", 0)>

            acado_step((ACADOinput *) u1BUS, (ACADOoutput *) y1BUS);

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(%<charType> *)y1", "(*(ACADOoutput *)y1BUS)", 0)>
        }

        void acado_solver_sfun_wrapper_Terminate(void) {
            acado_cleanup();
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("acado_common.h")>
        %<LibAddToCommonIncludes("acado_solver_sfunction.h")>
    %endif
    %<SLibAddToStaticSources("acado_solver.c")>
    %<SLibAddToStaticSources("acado_integrator.c")>
    %<SLibAddToStaticSources("acado_auxiliary_functions.c")>
    %<SLibAddToStaticSources("acado_solver_sfunction.c")>
    %<SLibAddToStaticSources("acado_qpoases3_interface.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Bounds.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Constraints.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Indexlist.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Matrices.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\MessageHandling.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Options.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Flipper.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\QProblem.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\QProblemB.c")>
    %<SLibAddToStaticSources("qpoases3\\src\\Utils.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (acado_solver_sfun_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        acado_solver_sfun_wrapper_Start();
    %else
        %% 
        acado_initialize();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        acado_solver_sfun_wrapper_Output(%<u1_ptr>, %<u1BUS_ptr>, %<y1_ptr>, %<y1BUS_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %% 
        acado_step((ACADOinput*)%<u1_ptr>, %<y1_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        acado_solver_sfun_wrapper_Terminate();
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (acado_solver_sfun_wrapper_freemem(%<y1BUS_addr>, %<u1BUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
        %% 
        acado_cleanup();
    %endif
%endfunction

%% [EOF]
